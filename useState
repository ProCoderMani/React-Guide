import React, { useState } from 'react'

const App = () => {
  // define value and function 
 const[name, setName] =  useState('Hi Mansih');

 const changeHandler =()=>{
  setName("Welcome here on my Repo Let's Learn")
 }

  return (
    <React.Fragment>
    <h1>{name}</h1>
    <button onClick={changeHandler}>Click me</button>

    </React.Fragment>
  )
}

export default App




// ========================================================================

import React, { useState } from 'react'

const App = () => {


  // define value and function 
 const[name, setName] =  useState('Hi Mansih');

 // useState with toggle functionality
 const changeHandler =()=>{
  if(name == 'Hi Manish'){
  setName("Welcome here on my Repo Let's Learn")
  }else{
    setName('Hi Manish')
  }
 }

  return (
    <React.Fragment>
    <h1>{name}</h1>
    <button onClick={changeHandler}>Click me</button>

    </React.Fragment>
  )
}

export default App











// ===============================================

import React, { useState } from 'react'

const App = () => {

  const data = [
    {id:1 , name: 'Manish'},
    {id:2 , name: 'Rohan'},
    {id:3 , name: 'Ritesh'},
    {id:4 , name: 'Sanket'}]

    const [info,setInfo] = useState(data)

    const deleteHandler=(id)=>{
      let newInfo = info.filter((info)=>info.id !== id)
      setInfo(newInfo)
    }

  return (
    <div>
      {/* setting data in map */}
    {info.map((user)=>{
      const {id, name} = user
      return <div key= {id}>
      <h1>{id} having name - {name}  --
      <button onClick={()=>deleteHandler(id)}>     delete</button>
      </h1>
      </div>
    })}  

    <button onClick={()=>setInfo([])}>Clear All!</button>
    </div>
  )
}

export default App








// ======================================================================
//      Counter + - 0

import { useState } from 'react'

const App = () => {
  const [value, setValue] = useState(0)
  
  function addHandler() {
    setValue(value+1)
  }
  function removeHandler() {
    setValue(value-1)
  }
  return (
    <div>
      <h1>The Value Counter - {value}</h1>
      
      <button onClick={addHandler}>Add</button>
      <button onClick={()=>setValue(0)}>Reset</button>
      <button onClick={removeHandler}>Decrement</button>
    </div>
  )
}

export default App










//=================================================================
// =============== Use-Effect basic 1.1===============================
import React, { useEffect, useState } from 'react'

const App = () => {
 // by default use effect runs on each re-render
 const [value , setValue]=useState(1);

 // we cannot make hooks conditional it will give error  for example 
//     if(value >=64){  
//    useEffect(()=>{
//   console.log('Use-Effect is operational');
//   // document.title will shows re-rendering effect on title
//   document.title = `my use-effect example (${value})`;
// })  }

 useEffect(()=>{
  console.log('Use-Effect is operational');
  // document.title will shows re-rendering effect on title
  if(value >=64){
  document.title = `my use-effect example (${value})`;
    } 
})
   return (
    <div>
    <h1>{value}</h1>
    <button onClick={()=>setValue(value+value)}>Add</button>
    </div>
  )
}
export default App








//=================================================================
// =============== Use-Effect basic 1.2===============================
import React, { useEffect, useState } from 'react'

const App = () => {
 // by default use effect runs on each re-render
 // Second parameter of use effect is condition
 const [value , setValue]=useState(1);
 useEffect(()=>{
  console.log('Use-Effect is operational');
  // document.title will shows re-rendering effect on title
  document.title = `my use-effect example (${value})`;
//  [] is the conditional parameter(second argumnent) in use effect if it is empty.It means use effect will render only once in statting. 
//  if [value] is used over here then it will re render the use-effect on every change on value
},[])
 
  return (
    <div>
    <h1>{value}</h1>
    <button onClick={()=>setValue(value+value)}>Add</button>

    </div>
  )
}

export default App







//===============================================================
//=================use-Effect      1.3(cleanup function)=========

import { render } from '@testing-library/react'
import React, { useEffect, useState } from 'react'

const App = () => {
  const [size, setSize] = useState(window.innerWidth)
  const windowSize=()=>{
    setSize(window.innerWidth)
  }
  useEffect(()=>{
   console.log('hnn bhai ') 
   window.addEventListener('resize',windowSize)
// eventlistners effect can be seen in consol events and clean up is important do it with [] or by removing the  event listner 
  },[])

  return (
    <div>
      <h1>window is having size  = {size}</h1>
    </div>
  )
}

export default App







// ==========================================================================
//============ use-Effect fetch api with fetch function===============

import React, { useEffect, useState } from 'react'

const App = () => {

  const url = 'https://api.github.com/users'

  const [gituser, setGitUers] = useState([])

  const userdata = async() =>{
      const response = await fetch(url)
      const data = await response.json()
      setGitUers(data)
  }

  useEffect(()=>{
    userdata()
  },[])

  return (
    <div>
      <h1>GitHub Users Info</h1>
      <ul>
        {gituser.map((userdata)=>{
          const {id, login, avatar_url, html_url} = userdata

          return <li key={id}>
            <img src={avatar_url} alt={login}/>
            <h1>{login}</h1>
            <a href={html_url}>  <h2>Visit Profile</h2> </a>
          </li>
        })}
      </ul>
      
    </div>
  )
}

export default App
